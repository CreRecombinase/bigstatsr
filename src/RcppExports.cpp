// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// bigcolvars
ListOf<NumericVector> bigcolvars(SEXP pBigMat, const IntegerVector& rowInd);
RcppExport SEXP bigstatsr_bigcolvars(SEXP pBigMatSEXP, SEXP rowIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    __result = Rcpp::wrap(bigcolvars(pBigMat, rowInd));
    return __result;
END_RCPP
}
// incrMat
NumericMatrix& incrMat(NumericMatrix& dest, const NumericMatrix& source);
RcppExport SEXP bigstatsr_incrMat(SEXP destSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dest(destSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    __result = Rcpp::wrap(incrMat(dest, source));
    return __result;
END_RCPP
}
// incrG
void incrG(SEXP pBigMat, const NumericMatrix& source, double n, double L, double m);
RcppExport SEXP bigstatsr_incrG(SEXP pBigMatSEXP, SEXP sourceSEXP, SEXP nSEXP, SEXP LSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    incrG(pBigMat, source, n, L, m);
    return R_NilValue;
END_RCPP
}
// tcrossprodEigen
void tcrossprodEigen(SEXP res, const Eigen::Map<Eigen::MatrixXd> bM);
RcppExport SEXP bigstatsr_tcrossprodEigen(SEXP resSEXP, SEXP bMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type res(resSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type bM(bMSEXP);
    tcrossprodEigen(res, bM);
    return R_NilValue;
END_RCPP
}
// crossprodEigen5
Eigen::MatrixXd crossprodEigen5(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> Y);
RcppExport SEXP bigstatsr_crossprodEigen5(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    __result = Rcpp::wrap(crossprodEigen5(X, Y));
    return __result;
END_RCPP
}
// scaling
NumericMatrix& scaling(NumericMatrix& source, const NumericVector& mean, const NumericVector& sd);
RcppExport SEXP bigstatsr_scaling(SEXP sourceSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd(sdSEXP);
    __result = Rcpp::wrap(scaling(source, mean, sd));
    return __result;
END_RCPP
}
// incrSup
void incrSup(SEXP pBigMat, const NumericMatrix& source);
RcppExport SEXP bigstatsr_incrSup(SEXP pBigMatSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    incrSup(pBigMat, source);
    return R_NilValue;
END_RCPP
}
// incrAll
void incrAll(SEXP pBigMat, const NumericMatrix& source);
RcppExport SEXP bigstatsr_incrAll(SEXP pBigMatSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    incrAll(pBigMat, source);
    return R_NilValue;
END_RCPP
}
// complete
void complete(SEXP pBigMat);
RcppExport SEXP bigstatsr_complete(SEXP pBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    complete(pBigMat);
    return R_NilValue;
END_RCPP
}
// scaled
void scaled(SEXP pBigMat2, SEXP pBigMat, const NumericVector& mean, const NumericVector& sd);
RcppExport SEXP bigstatsr_scaled(SEXP pBigMat2SEXP, SEXP pBigMatSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat2(pBigMat2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd(sdSEXP);
    scaled(pBigMat2, pBigMat, mean, sd);
    return R_NilValue;
END_RCPP
}
// multEigen
Eigen::MatrixXd multEigen(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> Y);
RcppExport SEXP bigstatsr_multEigen(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    __result = Rcpp::wrap(multEigen(X, Y));
    return __result;
END_RCPP
}
// transpose3
void transpose3(SEXP pBigMat, SEXP pBigMat2);
RcppExport SEXP bigstatsr_transpose3(SEXP pBigMatSEXP, SEXP pBigMat2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat2(pBigMat2SEXP);
    transpose3(pBigMat, pBigMat2);
    return R_NilValue;
END_RCPP
}
// univRegLin
NumericMatrix univRegLin(SEXP pBigMat, const NumericVector& y, const IntegerVector& rowInd);
RcppExport SEXP bigstatsr_univRegLin(SEXP pBigMatSEXP, SEXP ySEXP, SEXP rowIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    __result = Rcpp::wrap(univRegLin(pBigMat, y, rowInd));
    return __result;
END_RCPP
}
