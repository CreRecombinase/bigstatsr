% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/randomSVD.R
\name{big_randomSVD}
\alias{big_randomSVD}
\title{A randomized algorithm for SVD.}
\usage{
big_randomSVD(X, fun.scaling = fun_scale, ind.train = seq(nrow(X)),
  block.size = 1000, K = 10, I = 10, use.Eigen = TRUE, ncores = 1,
  backingpath = NULL)
}
\arguments{
\item{X}{A \link[bigmemory:big.matrix-class]{big.matrix}.
You shouldn't have missing values in your data.}

\item{fun.scaling}{A function that returns a named list of mean and
sd for every column, to scale each of their elements such as followed:
\eqn{\frac{X_{i,j} - mean_j}{sd_j}}.}

\item{ind.train}{An optional vector of the row indices that are used,
for the training part. If not specified, all data are used.}

\item{block.size}{Maximum number of columns read at once.
Default is \code{1000}.}

\item{K}{Number of PCs to compute. This algorithm shouldn't
be used to compute a lot of PCs. Default is \code{10}.}

\item{I}{The number of iterations of the algorithm. Default is \code{10}.}

\item{use.Eigen}{Should the \code{Eigen} library be used
for matrix computations? Default is \code{TRUE}. See details.}

\item{ncores}{Number or cores used. Default doesn't use parallelism.}

\item{backingpath}{If \code{X} is filebacked and parallelism is used,
the path where are stored the files that are backing \code{X}.}
}
\description{
A randomized algorithm for SVD (or PCA) of a "big.matrix".
}
\examples{
# Simulating some data
X <- big.matrix(1023, 511)
X[] <- rnorm(length(X))

# Comparing with prcomp
test <- big_randomSVD(X = X,
                      fun.scaling = big_scale,
                      block.size = 50,
                      ncores = 1)

pca <- prcomp(X[,], center = TRUE, scale. = TRUE)

# same scaling
print(all.equal(test$means, pca$center))
print(all.equal(test$sds, pca$scale))

# scores or loadings are the same or opposite
scores <- test$u \%*\% diag(test$d)
plot(as.numeric(scores), as.numeric(pca$x[, 1:10]))
plot(as.numeric(test$v), as.numeric(pca$rotation[, 1:10]))


# Using only half of the data for "training"
ind <- sort(sample(nrow(X), nrow(X)/2))

test2 <- big_randomSVD(X = X, ind.train = ind,
                       fun.scaling = big_scale,
                       block.size = 10, ncores = 1)

pca2 <- prcomp(X[ind, ], center = TRUE, scale. = TRUE)

# same scaling
print(all.equal(test2$means, pca2$center))
print(all.equal(test2$sds, pca2$scale))

# scores or loadings are the same or opposite
scores2 <- test2$u \%*\% diag(test2$d)
plot(as.numeric(scores2), as.numeric(pca2$x[, 1:10]))
plot(as.numeric(test2$v), as.numeric(pca2$rotation[, 1:10]))

}
\references{
Rokhlin, V., Szlam, A., & Tygert, M. (2010).
A Randomized Algorithm for Principal Component Analysis.
SIAM Journal on Matrix Analysis and Applications, 31(3), 1100â€“1124.
doi:10.1137/080736417
}
\seealso{
\link{big_funScaling} \link{prcomp} \link{svd}
}

