% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/corr.R
\name{big_cor}
\alias{big_cor}
\title{Correlation}
\usage{
big_cor(X., ind.row = rows_along(X.), ind.col = cols_along(X.),
  block.size = 1000)
}
\arguments{
\item{X.}{Either a \link[=big.matrix-class]{big.matrix} or
a \link[=big.matrix.descriptor-class]{big.matrix.descriptor}.}

\item{ind.row}{An optional vector of the row indices that are used.
If not specified, all rows are used. \strong{Don't use negative indices.}}

\item{ind.col}{An optional vector of the column indices that are used.
If not specified, all columns are used. \strong{Don't use negative indices.}}

\item{block.size}{Maximum number of columns read at once. Default is \code{1000}.}
}
\value{
The correlation matrix
}
\description{
Compute the correlation matrix of a \code{big.matrix}.
}
\details{
This algorithm is not really memory efficient. I'm planning on fixing this,
if it is really needed.
}
\examples{
X.desc <- big_attachExtdata()

# Comparing with cor
K <- big_cor(X.desc)
dim(K)


K <- crossprod(attach.BM(X.desc)[,])
sums
K2 <- K
K2 <- bigstatsr:::correlize(K2)
K2[1:5, 1:5]

true <- cor(attach.BM(X.desc)[,])
all.equal(K, true, check.attributes = FALSE)

# Using only half of the data
n <- nrow(X.desc)
ind <- sort(sample(n, n/2))
K2 <- big_crossprodSelf(X.desc, fun.scaling = big_noscale,
                        ind.row = ind)
dim(K2)

true2 <- crossprod(attach.BM(X.desc)[ind, ])
all.equal(K2, true2, check.attributes = FALSE)


}
\seealso{
\link{cor}
}
