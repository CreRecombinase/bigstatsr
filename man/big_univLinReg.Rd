% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/univLinReg.R
\name{big_univLinReg}
\alias{big_univLinReg}
\title{Column-wise linear regression}
\usage{
big_univLinReg(X, y.train, ind.train = seq(nrow(X)), covar.train = NULL,
  ncores2 = 1)
}
\arguments{
\item{X}{A \link[bigmemory:big.matrix-class]{big.matrix}.
You shouldn't have missing values in your data.}

\item{y.train}{Vector of responses, corresponding to \code{ind.train}.}

\item{ind.train}{An optional vector of the row indices that are used,
for the training part. If not specified, all rows are used.}

\item{covar.train}{Matrix of covariables to be added in each model to correct
for confounders (e.g. the scores of PCA), corresponding to \code{ind.train}.
Default is \code{NULL} and corresponds to only adding an Intercept to each model.}

\item{ncores2}{Number of cores used. Default doesn't use parallelism.
For this function, use only half of the cores you have.}
}
\value{
A data.frame with 4 elements:
\enumerate{
\item the slopes of each regression,
\item the standard errors of each slope,
\item the t-scores associated with each slope,
\item the p-values associated with each t-score.
}
}
\description{
Slopes of column-wise linear regressions of each column
of a \code{big.matrix}, with some other associated statistics.
Covariates can be added to correct for confounders.
}
\examples{
# Simulating some data
data("trees")
N <- nrow(trees)
covar <- matrix(rnorm(N * 3), N)
X <- as.big.matrix(as.matrix(trees[, -1]))
y <- trees[, 1]

# without covar
lmVol0 <- summary(lm(Girth ~ Volume, data = trees))
lmHei0 <- summary(lm(Girth ~ Height, data = trees))

print(big_univLinReg(X, y))
print(rbind(lmHei0$coefficients[2, ], lmVol0$coefficients[2, ]))

# With all data
# lm
lmVol <- summary(lm(Girth ~ Volume + covar, data = trees))
lmHei <- summary(lm(Girth ~ Height + covar, data = trees))

print(big_univLinReg(X, y, covar = covar))
print(rbind(lmHei$coefficients[2, ], lmVol$coefficients[2, ]))

# With only half of the data
ind.train <- sort(sample(N, N / 2))

# lm
lmVol2 <- summary(lm(Girth ~ Volume + covar, data = trees, subset = ind.train))
lmHei2 <- summary(lm(Girth ~ Height + covar, data = trees, subset = ind.train))

print(big_univLinReg(X, y[ind.train],
                     covar = covar[ind.train, ],
                     ind.train = ind.train))
print(rbind(lmHei2$coefficients[2, ], lmVol2$coefficients[2, ]))
}
\seealso{
\link[stats:lm]{lm}
}
