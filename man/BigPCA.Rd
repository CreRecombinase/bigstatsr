% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCA.R
\name{BigPCA}
\alias{BigPCA}
\title{Principal Components of a "big.matrix".}
\usage{
BigPCA(X, block.size, k = NULL, ind.train = seq(nrow(X)),
  vec.center = rep(0, ncol(X)), vec.scale = rep(1, ncol(X)),
  thr.eigval = 0.001, use.Eigen = TRUE, progress = TRUE)
}
\arguments{
\item{k}{Number of PCs to compute. Default is all.}

\item{thr.eigval}{Threshold to remove "unsignificant" PCs.
Default is \code{1e-3}.}
}
\value{
A \code{matrix} of PCs.
}
\description{
Get k or all Principal Components (PCs) of a \code{big.matrix}.
}
\details{
See \code{\link{BigXYt}}.

Note that for the Eigen decomposition, only \code{R} is
used because is faster (see \href{http://goo.gl/UYJcCw}{stackoverflow}).
If you want a large number of eigenvectors/values, you should
really considerer using Microsoft R Open for speed.
}
\examples{
# Function for comparing
diffPCs <- function(test, rot) {
  k <- ncol(test)
  diff1 <- test - rot[, 1:k]
  diff2 <- test + rot[, 1:k]
  diff <- pmin(abs(diff1), abs(diff2))
  max(diff)
}


### PRIMAL

# Simulating some data
X <- big.matrix(100, 50, shared = FALSE)
X[] <- rnorm(length(X))

# center and scale
vec.center <- colmeans(X)
vec.scale <- colsds(X)


# Comparing with prcomp
test <- BigPCA(X = X,
               block.size = 10,
               vec.center = vec.center,
               vec.scale = vec.scale)

pca <- prcomp(X[,], center = TRUE, scale. = TRUE)


# PCs are the same or opposite
print(diffPCs(test, pca$x))


# Using only half of the data for "training"
ind <- sort(sample(nrow(X), nrow(X)/2))
vec.center <- colmeans(X, ind)
vec.scale <- colsds(X, ind)

test <- BigPCA(X = X,
               block.size = 10,
               ind.train = ind,
               vec.center = vec.center,
               vec.scale = vec.scale)

pca <- prcomp(X[ind, ], center = TRUE, scale. = TRUE)
print(diffPCs(test[ind, ], pca$x))
pred <- predict(pca, X[-ind, ])
print(diffPCs(test[-ind, ], pred))


### DUAL

# Simulating some data
X <- big.matrix(50, 100, shared = FALSE)
X[] <- rnorm(length(X))


# center and scale
vec.center <- colmeans(X)
vec.scale <- colsds(X)

# Comparing with prcomp
test <- BigPCA(X = X,
               block.size = 10,
               vec.center = vec.center,
               vec.scale = vec.scale)

pca <- prcomp(X[,], center = TRUE, scale. = TRUE)

# Note the difference in dimensions
print(dim(test))
print(dim(pca$x))
plot(pca$sdev)
print(pca$sdev[50])

# PCs are the same or opposite
print(diffPCs(test, pca$x))


# Using only half of the data for "training"
ind <- sort(sample(nrow(X), nrow(X)/2))
vec.center <- colmeans(X, ind)
vec.scale <- colsds(X, ind)

test <- BigPCA(X = X,
               block.size = 10,
               ind.train = ind,
               vec.center = vec.center,
               vec.scale = vec.scale)

pca <- prcomp(X[ind, ], center = TRUE, scale. = TRUE)
print(diffPCs(test[ind, ], pca$x))
pred <- predict(pca, X[-ind, ])
print(diffPCs(test[-ind, ], pred))
}
\seealso{
\code{\link{prcomp}}
}

