% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crossprodSelf.R
\name{big_crossprodSelf}
\alias{big_crossprodSelf}
\title{Crossprod}
\usage{
big_crossprodSelf(X, fun.scaling, ind.train = seq(nrow(X)),
  block.size = 1000, use.Eigen = !detect_MRO())
}
\arguments{
\item{X}{A \link[bigmemory:big.matrix-class]{big.matrix}.
You shouldn't have missing values in your data.}

\item{fun.scaling}{A function that returns a named list of
\strong{\code{mean}} and \strong{\code{sd}} for every column, to scale each of their elements
such as followed: \deqn{\frac{X_{i,j} - mean_j}{sd_j}}.}

\item{ind.train}{An optional vector of the row indices that are used,
for the training part. If not specified, all rows are used.}

\item{block.size}{Maximum number of columns read at once.
Default is \code{1000}.}

\item{use.Eigen}{Should the \code{Eigen} library be used
for matrix computations? Default tries to detect MRO. See details.}
}
\value{
A list of
\itemize{
\item \eqn{K = X.train^T X.train},
\item a numeric vector \code{mean} of column scaling,
\item a numeric vector \code{sd} of column scaling.
}
}
\description{
Compute \eqn{X.train^T X.train} for a \code{big.matrix} \code{X}
after applying a particular scaling to it.
}
\details{
For matrix computations, using \code{Eigen} library is faster.
However, if you link \code{R} with an optimized math library,
using \code{R}'s base operations is even much faster.

For example, you can easily link \code{R} with the
\href{https://software.intel.com/en-us/intel-mkl}{Intel®
Math Kernel Library} (Intel® MKL) through
\href{https://mran.revolutionanalytics.com/open/}{Microsoft
R Open} (MRO). It really improves performance
of \code{R} and \code{RcppArmadillo} matrix computations,
yet not the ones of \code{RcppEigen} (at least not directly).

So, \enumerate{
\item \code{Eigen} should be prefered if you don't change anything,
\item base \code{R} should be prefered if you use MRO,
\item \code{Eigen} may be prefered if you manage to link \code{RcppEigen}
with the MKL (please \href{mailto:florian.prive.21@gmail.com}{contact me}
if you do!).}
}
\examples{
# Simulating some data
X <- big.matrix(41, 17)
X[] <- rnorm(length(X))

# Comparing with tcrossprod
big_noscale <- big_scale(center = FALSE)
test <- big_crossprodSelf(X, fun.scaling = big_noscale)
print(dim(test$K))
print(all.equal(test$K, crossprod(X[,])))

# Using only half of the data for "training"
ind <- sort(sample(nrow(X), nrow(X)/2))
test2 <- big_crossprodSelf(X, fun.scaling = big_noscale,
                           ind.train = ind)
print(dim(test2$K))
print(all.equal(test2$K, crossprod(X[ind, ])))
}
\seealso{
\link[base:crossprod]{crossprod}
}
